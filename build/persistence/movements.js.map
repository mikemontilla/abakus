{"version":3,"sources":["../../server/persistence/movements.js"],"names":[],"mappings":";;;;;QAyBgB,Y,GAAA,Y;QAaA,Y,GAAA,Y;QAUA,c,GAAA,c;;AAhDhB;;;;;;AAEA,SAAS,aAAT,CAAuB,QAAvB,EAAiC;AAC7B,WAAO;AACH,qBAAa,SAAS,UADnB;AAEH,qBAAa,SAAS,WAFnB;AAGH,cAAM,SAAS,IAHZ;AAIH,gBAAQ,SAAS,SAAS,MAAlB,CAJL;AAKH,iBAAS,SAAS,OALf;AAMH,cAAM,SAAS;AANZ,KAAP;AAQH;;AAED,SAAS,eAAT,CAAyB,QAAzB,EAAmC;AAC/B,WAAO;AACH,YAAI,SAAS,SAAS,WAAlB,CADD;AAEH,oBAAY,SAAS,SAAS,WAAlB,CAFT;AAGH,qBAAa,SAAS,WAHnB;AAIH,cAAM,SAAS,IAJZ;AAKH,gBAAQ,SAAS,SAAS,MAAlB,CALL;AAMH,iBAAS,SAAS,OANf;AAOH,cAAM,SAAS;AAPZ,KAAP;AASH;;AAEM,SAAS,YAAT,CAAsB,EAAtB,EAA0B,QAA1B,EAAoC;AACvC,QAAM,QAAQ,wDAAwD,EAAtE;AACA,yBAAW,KAAX,CAAiB,KAAjB,EAAwB,UAAS,KAAT,EAAgB,IAAhB,EAAsB,KAAtB,EAA6B;AACjD,YAAG,KAAH,EACI,OAAO,SAAS,KAAT,CAAP;;AAEJ,YAAM,YAAY,KAAK,GAAL,CAAS,UAAS,GAAT,EAAc;AACrC,mBAAO,gBAAgB,GAAhB,CAAP;AACH,SAFiB,CAAlB;AAGA,eAAO,SAAS,IAAT,EAAe,SAAf,CAAP;AACH,KARD;AASH;;AAEM,SAAS,YAAT,CAAsB,QAAtB,EAAgC,QAAhC,EAA0C;AAC7C,QAAM,QAAQ,oCAAd;AACA,QAAM,cAAc,cAAc,QAAd,CAApB;AACA,yBAAW,KAAX,CAAiB,KAAjB,EAAwB,WAAxB,EAAqC,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AACzD,YAAG,KAAH,EACI,OAAO,SAAS,KAAT,CAAP;AACJ,eAAO,SAAS,IAAT,EAAe,OAAO,QAAtB,CAAP;AACH,KAJD;AAKH;;AAEM,SAAS,cAAT,CAAwB,EAAxB,EAA4B,QAA5B,EAAsC;AACzC,QAAM,QAAQ,oDAAd;AACA,yBAAW,KAAX,CAAiB,KAAjB,EAAwB,CAAC,EAAD,CAAxB,EAA8B,UAAS,KAAT,EAAgB,MAAhB,EAAwB;AAClD,YAAG,KAAH,EACI,OAAO,SAAS,KAAT,CAAP;AACJ,eAAO,SAAS,IAAT,EAAe,OAAO,YAAtB,CAAP;AACH,KAJD;AAKH","file":"movements.js","sourcesContent":["import connection from './connection'\n\nfunction mapToDatabase(movement) {\n    return {\n        business_id: movement.businessId,\n        description: movement.description,\n        type: movement.type,\n        amount: parseInt(movement.amount),\n        comment: movement.comment,\n        date: movement.date\n    }\n}\n\nfunction mapFromDatabase(movement) {\n    return {\n        id: parseInt(movement.movement_id),\n        businessId: parseInt(movement.business_id),\n        description: movement.description,\n        type: movement.type,\n        amount: parseInt(movement.amount),\n        comment: movement.comment,\n        date: movement.date\n    };\n}\n\nexport function getMovements(id, callback) {\n    const query = \"SELECT * FROM abakus.movements WHERE business_id = \" + id;\n    connection.query(query, function(error, rows, field) {\n        if(error)\n            return callback(error);\n\n        const movements = rows.map(function(row) {\n            return mapFromDatabase(row);\n        });\n        return callback(null, movements);\n    });\n}\n\nexport function saveMovement(movement, callback) {\n    const query = \"INSERT INTO abakus.movements SET ?\";\n    const newMovement = mapToDatabase(movement);\n    connection.query(query, newMovement, function(error, result) {\n        if(error)\n            return callback(error);\n        return callback(null, result.insertId);\n    });\n}\n\nexport function deleteMovement(id, callback) {\n    const query = \"DELETE FROM abakus.movements WHERE movement_id = ?\";\n    connection.query(query, [id], function(error, result) {\n        if(error)\n            return callback(error);\n        return callback(null, result.affectedRows);\n    });\n}\n"]}